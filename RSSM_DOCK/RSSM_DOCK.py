# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Rssm_Dock.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import tempfile
import subprocess
import os
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QLineEdit, QFileDialog
import sqlite3


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(560, 863)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.stackedWidget.setObjectName("stackedWidget")
        self.SIGN_IN_PAGE = QtWidgets.QWidget()
        self.SIGN_IN_PAGE.setObjectName("SIGN_IN_PAGE")
        self.label = QtWidgets.QLabel(self.SIGN_IN_PAGE)
        self.label.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("1.png"))
        self.label.setObjectName("label")
        self.SWITCH_SIGN_UP_0_1_pushButton = QtWidgets.QPushButton(self.SIGN_IN_PAGE)
        self.SWITCH_SIGN_UP_0_1_pushButton.setGeometry(QtCore.QRect(300, 270, 171, 31))
        self.SWITCH_SIGN_UP_0_1_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                         "border: none;")
        self.SWITCH_SIGN_UP_0_1_pushButton.setText("")
        self.SWITCH_SIGN_UP_0_1_pushButton.setObjectName("SWITCH_SIGN_UP_0_1_pushButton")
        self.SWITCH_SIGN_UP_0_1_pushButton.clicked.connect(self.switch_0_1)
        self.SWITCH_HOME_0_2_pushButton = QtWidgets.QPushButton(self.SIGN_IN_PAGE)
        self.SWITCH_HOME_0_2_pushButton.setGeometry(QtCore.QRect(120, 610, 331, 51))
        self.SWITCH_HOME_0_2_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_HOME_0_2_pushButton.setText("")
        self.SWITCH_HOME_0_2_pushButton.setObjectName("SWITCH_HOME_0_2_pushButton")
        self.SWITCH_HOME_0_2_pushButton.clicked.connect(self.entrance)
        self.SIGN_IN_LOGIN_lineEdit = QtWidgets.QLineEdit(self.SIGN_IN_PAGE)
        self.SIGN_IN_LOGIN_lineEdit.setGeometry(QtCore.QRect(102, 379, 371, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SIGN_IN_LOGIN_lineEdit.setFont(font)
        self.SIGN_IN_LOGIN_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                  "border: none;")
        self.SIGN_IN_LOGIN_lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.SIGN_IN_LOGIN_lineEdit.setObjectName("SIGN_IN_LOGIN_lineEdit")
        self.SIGN_IN_PASSWORD_lineEdit = QtWidgets.QLineEdit(self.SIGN_IN_PAGE)
        self.SIGN_IN_PASSWORD_lineEdit.setGeometry(QtCore.QRect(100, 500, 371, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SIGN_IN_PASSWORD_lineEdit.setFont(font)
        self.SIGN_IN_PASSWORD_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                     "border: none;")
        self.SIGN_IN_PASSWORD_lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.SIGN_IN_PASSWORD_lineEdit.setObjectName("SIGN_IN_PASSWORD_lineEdit")
        self.SIGN_IN_PASSWORD_lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.stackedWidget.addWidget(self.SIGN_IN_PAGE)
        self.SIGN_UP_PAGE = QtWidgets.QWidget()
        self.SIGN_UP_PAGE.setObjectName("SIGN_UP_PAGE")
        self.label_2 = QtWidgets.QLabel(self.SIGN_UP_PAGE)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("2.png"))
        self.label_2.setObjectName("label_2")
        self.SWITCH_HOME_1_2_pushButton = QtWidgets.QPushButton(self.SIGN_UP_PAGE)
        self.SWITCH_HOME_1_2_pushButton.setGeometry(QtCore.QRect(120, 610, 331, 51))
        self.SWITCH_HOME_1_2_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_HOME_1_2_pushButton.setText("")
        self.SWITCH_HOME_1_2_pushButton.setObjectName("SWITCH_HOME_1_2_pushButton")
        self.SWITCH_HOME_1_2_pushButton.clicked.connect(self.registration)
        self.SIGN_UP_LOGIN_lineEdit = QtWidgets.QLineEdit(self.SIGN_UP_PAGE)
        self.SIGN_UP_LOGIN_lineEdit.setGeometry(QtCore.QRect(100, 380, 371, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SIGN_UP_LOGIN_lineEdit.setFont(font)
        self.SIGN_UP_LOGIN_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                  "border: none;")
        self.SIGN_UP_LOGIN_lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.SIGN_UP_LOGIN_lineEdit.setObjectName("SIGN_UP_LOGIN_lineEdit")
        self.SWITCH_SIGN_IN_1_0_pushButton = QtWidgets.QPushButton(self.SIGN_UP_PAGE)
        self.SWITCH_SIGN_IN_1_0_pushButton.setGeometry(QtCore.QRect(140, 270, 81, 31))
        self.SWITCH_SIGN_IN_1_0_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                         "border: none;")
        self.SWITCH_SIGN_IN_1_0_pushButton.setText("")
        self.SWITCH_SIGN_IN_1_0_pushButton.setObjectName("SWITCH_SIGN_IN_1_0_pushButton")
        self.SWITCH_SIGN_IN_1_0_pushButton.clicked.connect(self.switch_0_0)
        self.SIGN_UP_PASSWORD_lineEdit = QtWidgets.QLineEdit(self.SIGN_UP_PAGE)
        self.SIGN_UP_PASSWORD_lineEdit.setGeometry(QtCore.QRect(100, 500, 371, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SIGN_UP_PASSWORD_lineEdit.setFont(font)
        self.SIGN_UP_PASSWORD_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                     "border: none;")
        self.SIGN_UP_PASSWORD_lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.SIGN_UP_PASSWORD_lineEdit.setObjectName("SIGN_UP_PASSWORD_lineEdit")
        self.SIGN_UP_PASSWORD_lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.stackedWidget.addWidget(self.SIGN_UP_PAGE)
        self.HOME_PAGE = QtWidgets.QWidget()
        self.HOME_PAGE.setObjectName("HOME_PAGE")
        self.label_3 = QtWidgets.QLabel(self.HOME_PAGE)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("3.png"))
        self.label_3.setObjectName("label_3")
        self.SWITCH_BACK_2_0_pushButton = QtWidgets.QPushButton(self.HOME_PAGE)
        self.SWITCH_BACK_2_0_pushButton.setGeometry(QtCore.QRect(20, 90, 71, 71))
        self.SWITCH_BACK_2_0_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_BACK_2_0_pushButton.setText("")
        self.SWITCH_BACK_2_0_pushButton.setObjectName("SWITCH_BACK_2_0_pushButton")
        self.SWITCH_BACK_2_0_pushButton.clicked.connect(self.switch_0_0)
        self.SWITCH_ALL_RSSM_2_3_pushButton = QtWidgets.QPushButton(self.HOME_PAGE)
        self.SWITCH_ALL_RSSM_2_3_pushButton.setGeometry(QtCore.QRect(30, 380, 501, 71))
        self.SWITCH_ALL_RSSM_2_3_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                          "border: none;")
        self.SWITCH_ALL_RSSM_2_3_pushButton.setText("")
        self.SWITCH_ALL_RSSM_2_3_pushButton.setObjectName("SWITCH_ALL_RSSM_2_3_pushButton")
        self.SWITCH_ALL_RSSM_2_3_pushButton.clicked.connect(self.switch_0_3)
        self.SWITCH_MORE_DOCK_2_5_pushButton = QtWidgets.QPushButton(self.HOME_PAGE)
        self.SWITCH_MORE_DOCK_2_5_pushButton.setGeometry(QtCore.QRect(30, 470, 501, 71))
        self.SWITCH_MORE_DOCK_2_5_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                           "border: none;")
        self.SWITCH_MORE_DOCK_2_5_pushButton.setText("")
        self.SWITCH_MORE_DOCK_2_5_pushButton.setObjectName("SWITCH_MORE_DOCK_2_5_pushButton")
        self.SWITCH_MORE_DOCK_2_5_pushButton.clicked.connect(self.switch_0_5)
        self.SWITCH_TASK_2_6_pushButton = QtWidgets.QPushButton(self.HOME_PAGE)
        self.SWITCH_TASK_2_6_pushButton.setGeometry(QtCore.QRect(30, 550, 501, 71))
        self.SWITCH_TASK_2_6_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_TASK_2_6_pushButton.setText("")
        self.SWITCH_TASK_2_6_pushButton.setObjectName("SWITCH_TASK_2_6_pushButton")
        self.SWITCH_TASK_2_6_pushButton.clicked.connect(self.switch_0_6)
        self.SEARCH_STUDENT_pushButton = QtWidgets.QPushButton(self.HOME_PAGE)
        self.SEARCH_STUDENT_pushButton.setGeometry(QtCore.QRect(460, 250, 51, 61))
        self.SEARCH_STUDENT_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                     "border: none;")
        self.SEARCH_STUDENT_pushButton.setText("")
        self.SEARCH_STUDENT_pushButton.setObjectName("SEARCH_STUDENT_pushButton")
        self.SEARCH_STUDENT_pushButton.clicked.connect(self.seach_student)
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit = QtWidgets.QLineEdit(self.HOME_PAGE)
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit.setGeometry(QtCore.QRect(30, 250, 421, 61))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit.setFont(font)
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                               "border: none;")
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit.setObjectName("SEARCH_STUDENT_IN_DATABASE_lineEdit")
        self.stackedWidget.addWidget(self.HOME_PAGE)
        self.ALL_RSSM_PAGE = QtWidgets.QWidget()
        self.ALL_RSSM_PAGE.setObjectName("ALL_RSSM_PAGE")
        self.ALL_STUDENT_listWidget = QtWidgets.QListWidget(self.ALL_RSSM_PAGE)
        self.ALL_STUDENT_listWidget.setGeometry(QtCore.QRect(20, 190, 521, 491))
        self.ALL_STUDENT_listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                  "border: none;")
        self.ALL_STUDENT_listWidget.setObjectName("ALL_STUDENT_listWidget")
        self.ALL_STUDENT_listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                  "border: none;\n"
                                                  "color:white;\n"
                                                  "text-align: center;\n"
                                                  "font-size: 12pt;")
        self.ALL_STUDENT_listWidget.itemClicked.connect(self.on_student_clicked)
        self.SWITCH_BACK_3_2_pushButton = QtWidgets.QPushButton(self.ALL_RSSM_PAGE)
        self.SWITCH_BACK_3_2_pushButton.setGeometry(QtCore.QRect(20, 90, 71, 71))
        self.SWITCH_BACK_3_2_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_BACK_3_2_pushButton.setText("")
        self.SWITCH_BACK_3_2_pushButton.setObjectName("SWITCH_BACK_3_2_pushButton")
        self.SWITCH_BACK_3_2_pushButton.clicked.connect(self.switch_0_2)
        self.label_4 = QtWidgets.QLabel(self.ALL_RSSM_PAGE)
        self.label_4.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("4.png"))
        self.label_4.setObjectName("label_4")
        self.ADD_STUDENT_pushButton = QtWidgets.QPushButton(self.ALL_RSSM_PAGE)
        self.ADD_STUDENT_pushButton.setGeometry(QtCore.QRect(90, 720, 381, 71))
        self.ADD_STUDENT_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                  "border: none;")
        self.ADD_STUDENT_pushButton.setText("")
        self.ADD_STUDENT_pushButton.setObjectName("ADD_STUDENT_pushButton")
        self.ADD_STUDENT_pushButton.clicked.connect(self.add_student)
        self.label_4.raise_()
        self.ALL_STUDENT_listWidget.raise_()
        self.SWITCH_BACK_3_2_pushButton.raise_()
        self.ADD_STUDENT_pushButton.raise_()
        self.stackedWidget.addWidget(self.ALL_RSSM_PAGE)
        self.PERSONAL_PAGE = QtWidgets.QWidget()
        self.PERSONAL_PAGE.setObjectName("PERSONAL_PAGE")
        self.label_5 = QtWidgets.QLabel(self.PERSONAL_PAGE)
        self.label_5.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("5.png"))
        self.label_5.setObjectName("label_5")
        self.PERSONAL_DOCK_listWidget = QtWidgets.QListWidget(self.PERSONAL_PAGE)
        self.PERSONAL_DOCK_listWidget.setGeometry(QtCore.QRect(20, 300, 521, 261))
        self.PERSONAL_DOCK_listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                    "border: none;")
        self.PERSONAL_DOCK_listWidget.setObjectName("PERSONAL_DOCK_listWidget")
        self.PERSONAL_DOCK_listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                    "border: none;\n"
                                                    "color:white;\n"
                                                    "text-align: center;\n"
                                                    "font-size: 12pt;")
        self.PERSONAL_DOCK_listWidget.itemClicked.connect(self.on_person_dock_clicked)
        self.SWITCH_BACK_4_2_pushButton = QtWidgets.QPushButton(self.PERSONAL_PAGE)
        self.SWITCH_BACK_4_2_pushButton.setGeometry(QtCore.QRect(20, 90, 71, 71))
        self.SWITCH_BACK_4_2_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_BACK_4_2_pushButton.setText("")
        self.SWITCH_BACK_4_2_pushButton.setObjectName("SWITCH_BACK_4_2_pushButton")
        self.SWITCH_BACK_4_2_pushButton.clicked.connect(self.switch_0_2)
        self.SEARCH_DOCK_PERSONAL_pushButton = QtWidgets.QPushButton(self.PERSONAL_PAGE)
        self.SEARCH_DOCK_PERSONAL_pushButton.setGeometry(QtCore.QRect(460, 220, 51, 51))
        self.SEARCH_DOCK_PERSONAL_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                           "border: none;")
        self.SEARCH_DOCK_PERSONAL_pushButton.setText("")
        self.SEARCH_DOCK_PERSONAL_pushButton.setObjectName("SEARCH_DOCK_PERSONAL_pushButton")
        self.SEARCH_DOCK_PERSONAL_pushButton.clicked.connect(self.seearch_dock_in_database)
        self.ADD_DOCK_PERSONAL_pushButton = QtWidgets.QPushButton(self.PERSONAL_PAGE)
        self.ADD_DOCK_PERSONAL_pushButton.setGeometry(QtCore.QRect(110, 590, 361, 71))
        self.ADD_DOCK_PERSONAL_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                        "border: none;")
        self.ADD_DOCK_PERSONAL_pushButton.setText("")
        self.ADD_DOCK_PERSONAL_pushButton.setObjectName("ADD_DOCK_PERSONAL_pushButton")
        self.ADD_DOCK_PERSONAL_pushButton.clicked.connect(self.add_person_dock)
        self.SEARCH_DOCK_IN_DATABASE_lineEdit = QtWidgets.QLineEdit(self.PERSONAL_PAGE)
        self.SEARCH_DOCK_IN_DATABASE_lineEdit.setGeometry(QtCore.QRect(30, 210, 421, 61))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SEARCH_DOCK_IN_DATABASE_lineEdit.setFont(font)
        self.SEARCH_DOCK_IN_DATABASE_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                            "border: none;")
        self.SEARCH_DOCK_IN_DATABASE_lineEdit.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.SEARCH_DOCK_IN_DATABASE_lineEdit.setObjectName("SEARCH_DOCK_IN_DATABASE_lineEdit")
        self.stackedWidget.addWidget(self.PERSONAL_PAGE)
        self.MORE_DOCK_PAGE = QtWidgets.QWidget()
        self.MORE_DOCK_PAGE.setObjectName("MORE_DOCK_PAGE")
        self.label_6 = QtWidgets.QLabel(self.MORE_DOCK_PAGE)
        self.label_6.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label_6.setText("")
        self.label_6.setPixmap(QtGui.QPixmap("5.png"))
        self.label_6.setObjectName("label_6")
        self.SEARCH_DOCK_ALL_pushButton = QtWidgets.QPushButton(self.MORE_DOCK_PAGE)
        self.SEARCH_DOCK_ALL_pushButton.setGeometry(QtCore.QRect(460, 220, 51, 51))
        self.SEARCH_DOCK_ALL_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SEARCH_DOCK_ALL_pushButton.setText("")
        self.SEARCH_DOCK_ALL_pushButton.setObjectName("SEARCH_DOCK_ALL_pushButton")
        self.SEARCH_DOCK_ALL_pushButton.clicked.connect(self.seearch_dock_in_databasee)
        self.SWITCH_BACK_5_2_pushButton = QtWidgets.QPushButton(self.MORE_DOCK_PAGE)
        self.SWITCH_BACK_5_2_pushButton.setGeometry(QtCore.QRect(20, 90, 71, 71))
        self.SWITCH_BACK_5_2_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_BACK_5_2_pushButton.setText("")
        self.SWITCH_BACK_5_2_pushButton.setObjectName("SWITCH_BACK_5_2_pushButton")
        self.SWITCH_BACK_5_2_pushButton.clicked.connect(self.switch_0_2)
        self.ADD_DOCK_ALL_pushButton = QtWidgets.QPushButton(self.MORE_DOCK_PAGE)
        self.ADD_DOCK_ALL_pushButton.setGeometry(QtCore.QRect(110, 590, 361, 71))
        self.ADD_DOCK_ALL_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                   "border: none;")
        self.ADD_DOCK_ALL_pushButton.setText("")
        self.ADD_DOCK_ALL_pushButton.setObjectName("ADD_DOCK_ALL_pushButton")
        self.ADD_DOCK_ALL_pushButton.clicked.connect(self.add_user_dock)
        self.ALL_DOCK_listWidget = QtWidgets.QListWidget(self.MORE_DOCK_PAGE)
        self.ALL_DOCK_listWidget.setGeometry(QtCore.QRect(20, 300, 521, 261))
        self.ALL_DOCK_listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                               "border: none;")
        self.ALL_DOCK_listWidget.setObjectName("ALL_DOCK_listWidget")
        self.ALL_DOCK_listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                               "border: none;\n"
                                               "color:white;\n"
                                               "text-align: center;\n"
                                               "font-size: 12pt;")
        self.ALL_DOCK_listWidget.itemClicked.connect(self.on_user_dock_clicked)
        self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit = QtWidgets.QLineEdit(self.MORE_DOCK_PAGE)
        self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit.setGeometry(QtCore.QRect(40, 210, 411, 61))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit.setFont(font)
        self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                                "border: none;\n"
                                                                "")
        self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit.setObjectName("SEARCH_DOCK_ALL_IN_DATABASE_lineEdit")
        self.stackedWidget.addWidget(self.MORE_DOCK_PAGE)
        self.TASK_PAGE = QtWidgets.QWidget()
        self.TASK_PAGE.setObjectName("TASK_PAGE")
        self.label_7 = QtWidgets.QLabel(self.TASK_PAGE)
        self.label_7.setGeometry(QtCore.QRect(0, 0, 560, 863))
        self.label_7.setText("")
        self.label_7.setPixmap(QtGui.QPixmap("6.png"))
        self.label_7.setObjectName("label_7")
        self.SWITCH_BACK_6_2_pushButton = QtWidgets.QPushButton(self.TASK_PAGE)
        self.SWITCH_BACK_6_2_pushButton.setGeometry(QtCore.QRect(20, 40, 71, 71))
        self.SWITCH_BACK_6_2_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                                      "border: none;")
        self.SWITCH_BACK_6_2_pushButton.setText("")
        self.SWITCH_BACK_6_2_pushButton.setObjectName("SWITCH_BACK_6_2_pushButton")
        self.SWITCH_BACK_6_2_pushButton.clicked.connect(self.switch_0_2)
        self.ADD_TASK_pushButton = QtWidgets.QPushButton(self.TASK_PAGE)
        self.ADD_TASK_pushButton.setGeometry(QtCore.QRect(90, 410, 351, 61))
        self.ADD_TASK_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                               "border: none;")
        self.ADD_TASK_pushButton.setText("")
        self.ADD_TASK_pushButton.setObjectName("ADD_TASK_pushButton")
        self.ADD_TASK_pushButton.clicked.connect(self.add_task)
        self.TASK_listWidget = QtWidgets.QListWidget(self.TASK_PAGE)
        self.TASK_listWidget.setGeometry(QtCore.QRect(60, 510, 441, 331))
        self.TASK_listWidget.setStyleSheet("font-size: 12pt;")
        self.TASK_listWidget.setObjectName("TASK_listWidget")

        self.TASK_listWidget.itemClicked.connect(self.on_task_clicked)
        self.NAME_TASK_lineEdit = QtWidgets.QLineEdit(self.TASK_PAGE)
        self.NAME_TASK_lineEdit.setGeometry(QtCore.QRect(250, 240, 291, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.NAME_TASK_lineEdit.setFont(font)
        self.NAME_TASK_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
                                              "border: none;\n"
                                              "color:white;")
        self.NAME_TASK_lineEdit.setObjectName("NAME_TASK_lineEdit")

        self.TIME_TASK_dateEdit = QtWidgets.QDateEdit(self.TASK_PAGE)
        self.TIME_TASK_dateEdit.setGeometry(QtCore.QRect(250, 322, 291, 41))

        self.TIME_TASK_dateEdit.setObjectName("TIME_TASK_dateEdit")

        self.stackedWidget.addWidget(self.TASK_PAGE)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.SIGN_IN_LOGIN_lineEdit.setPlaceholderText(_translate("MainWindow", "Введите свой логин"))
        self.SIGN_IN_PASSWORD_lineEdit.setPlaceholderText(_translate("MainWindow", "Введите свой пароль"))
        self.SIGN_UP_LOGIN_lineEdit.setPlaceholderText(_translate("MainWindow", "Введите свой логин"))
        self.SIGN_UP_PASSWORD_lineEdit.setPlaceholderText(_translate("MainWindow", "Введите свой пароль"))
        self.SEARCH_STUDENT_IN_DATABASE_lineEdit.setPlaceholderText(_translate("MainWindow", "  Введите ФИО студента"))
        self.SEARCH_DOCK_IN_DATABASE_lineEdit.setPlaceholderText(
            _translate("MainWindow", "  Введите название документа"))
        self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit.setPlaceholderText(_translate("MainWindow", "Введите название сюда"))
        self.NAME_TASK_lineEdit.setPlaceholderText(_translate("MainWindow", "Введите название сюда"))

    def switch_0_0(self, index):
        self.stackedWidget.setCurrentIndex(0)  # переключатель на вход
        if self.SIGN_IN_LOGIN_lineEdit and self.SIGN_IN_PASSWORD_lineEdit:
            self.SIGN_IN_LOGIN_lineEdit.clear()
            self.SIGN_IN_PASSWORD_lineEdit.clear()
        else:
            self.SIGN_UP_LOGIN_lineEdit.clear()
            self.SIGN_UP_PASSWORD_lineEdit.clear()

    def switch_0_1(self, index):
        self.stackedWidget.setCurrentIndex(1)  # переключатель на регистрацию
        if self.SIGN_UP_LOGIN_lineEdit and self.SIGN_UP_PASSWORD_lineEdit:
            self.SIGN_UP_LOGIN_lineEdit.clear()
            self.SIGN_UP_PASSWORD_lineEdit.clear()
        else:
            self.SIGN_IN_LOGIN_lineEdit.clear()
            self.SIGN_IN_PASSWORD_lineEdit.clear()

    def switch_0_2(self, index):
        self.stackedWidget.setCurrentIndex(2)  # переключатель на главную страницу

    def switch_0_3(self, index):
        self.stackedWidget.setCurrentIndex(3)  # переключатель на список студентов
        self.display_all_student()

    def switch_0_4(self, index):
        self.stackedWidget.setCurrentIndex(4)  # переключатель на личную страницу студента

    def switch_0_5(self, index):
        self.stackedWidget.setCurrentIndex(5)  # переключатель на прочую документацию
        self.display_user_dock()

    def switch_0_6(self, index):
        self.stackedWidget.setCurrentIndex(6)  # переключатель на лист с задачами
        self.display_tasks()

    # ФУНКЦИЯ ДЛЯ РЕГИСТРАЦИИ АККАУНТА
    def registration(self):
        con = sqlite3.connect('RSSM.db')
        cur = con.cursor()
        a = self.SIGN_UP_LOGIN_lineEdit.text()
        b = self.SIGN_UP_PASSWORD_lineEdit.text()
        query1 = f" INSERT INTO users (login,password) VALUES('{a}','{b}')"
        cur.execute(query1)
        con.commit()
        cur.close()
        con.close()

        self.stackedWidget.setCurrentIndex(2)  # переход на домашнюю

    # ФУНКЦИЯ ДЛЯ ВХОДА В АККАУНТ
    def entrance(self):
        login = self.SIGN_IN_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text()

        # Подключиться к базе данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()

        # Проверить, существует ли пользователь с таким логином и паролем в таблице users
        cursor.execute("SELECT * FROM users WHERE login=? AND password=?", (login, password))
        user = cursor.fetchone()

        if user:
            self.stackedWidget.setCurrentIndex(2)

        else:
            self.stackedWidget.setCurrentIndex(0)

    # ФУНКЦИЯ ДЛЯ ОТОБРАЖЕНИЯ ЗАМЕТОК
    def display_tasks(self):
        self.TASK_listWidget.clear()
        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()
        con = sqlite3.connect('RSSM.db')
        cur = con.cursor()
        cur.execute(
            "SELECT id, name_task, date_task FROM person_task WHERE login=? AND password=? ORDER BY date_task ASC",
            (login, password))
        tasks = cur.fetchall()
        for task in tasks:
            task_id = task[0]
            task_name = task[1]
            deadline = task[2]
            item = QtWidgets.QListWidgetItem(f"{task_name} - {deadline}")
            item.setData(Qt.UserRole, task_id)
            item.setTextAlignment(Qt.AlignCenter)
            self.TASK_listWidget.addItem(item)
        cur.close()
        con.close()

    # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ЗАДАЧИ В БД
    def add_task(self):
        name = self.NAME_TASK_lineEdit.text()
        deadline = self.TIME_TASK_dateEdit.date().toString("yyyy-MM-dd")

        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()

        con = sqlite3.connect('RSSM.db')
        cur = con.cursor()
        cur.execute("INSERT INTO person_task ( name_task, date_task, login, password) VALUES (?, ?, ?, ?)",
                    (name, deadline, login, password))

        con.commit()

        self.display_tasks()

    # ФУНКЦИЯ ДЛЯ УДАЛЕНИЯ ЗАДАЧИ ИЗ БАЗЫ ДАННЫХ
    def on_task_clicked(self, item):
        # получаем данные о выбранной задаче
        task_id = item.data(Qt.UserRole)
        # отображаем диалоговое окно подтверждения удаления
        reply = QMessageBox.question(self.TASK_PAGE, 'Удаление задач', 'Вы уверены, что хотите удалить эту задачу?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            # удаляем задачу из базы данных и из списка

            conn = sqlite3.connect('RSSM.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM person_task WHERE id = ?", (task_id,))
            conn.commit()

            cursor.close()
            conn.close()
            self.display_tasks()

    # ФУНКЦИЯ ДЛЯ ОТОБРАЖЕНИЯ СТУДЕНТА
    def display_all_student(self):
        self.ALL_STUDENT_listWidget.clear()
        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()
        con = sqlite3.connect('RSSM.db')
        cur = con.cursor()
        cur.execute(
            "SELECT id, name FROM compound WHERE login=? AND password=? ORDER BY name ASC", (login, password))
        students = cur.fetchall()
        for student in students:
            student_id = student[0]
            name = student[1]
            item = QtWidgets.QListWidgetItem(name)
            item.setTextAlignment(Qt.AlignCenter)
            item.setData(Qt.UserRole, student_id)
            self.ALL_STUDENT_listWidget.addItem(item)
        cur.close()
        con.close()

    # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ СТУДЕНТА В БД
    def add_student(self):
        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()

        dialog = QDialog(self.ALL_RSSM_PAGE)
        dialog.setWindowTitle("Добавление студента")
        dialog.setFixedSize(500, 150)

        # Создать вертикальный компоновщик для диалогового окна
        vbox = QVBoxLayout(dialog)

        # Добавить метку с текстом "Введите имя студента и выберите документ" в вертикальный компоновщик
        label = QLabel("Введите имя студента и выберите фото", dialog)
        label.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        label.setFont(font)
        vbox.addWidget(label)

        # Создать горизонтальный компоновщик для поля ввода имени и кнопок
        hbox = QHBoxLayout()

        # Добавить поле ввода имени в горизонтальный компоновщик
        name_input = QLineEdit(dialog)
        name_input.setPlaceholderText("Имя студента")
        name_input.setFixedHeight(30)  # Высота поля ввода
        name_input.setFixedWidth(250)  # Ширина поля ввода
        hbox.addWidget(name_input)

        # Добавить кнопки в горизонтальный компоновщик
        button_box = QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel, dialog)
        button_box.button(QtWidgets.QDialogButtonBox.Ok).setText("Выбрать фото")
        button_box.button(QtWidgets.QDialogButtonBox.Cancel).setText("Закрыть")
        hbox.addWidget(button_box)

        # Добавить горизонтальный компоновщик в вертикальный компоновщик
        vbox.addLayout(hbox)

        # Открыть диалог выбора файла при нажатии на кнопку "ОК"
        button_box.accepted.connect(lambda: file_dialog.exec_())

        file_dialog = QFileDialog(caption="Выберите фото студента", filter="Image files (*.jpg *.jpeg *.png)")
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("Image files (*.jpg *.jpeg *.png)")

        # Получить результаты ввода при нажатии на кнопку "ОК" в диалоге выбора файла
        button_box.accepted.connect(lambda: self.add_student_to_db(name_input.text(),
                                                                   file_dialog.selectedFiles()[
                                                                       0] if file_dialog.result() == QFileDialog.Accepted else None,
                                                                   login, password))

        # Установить соединение для кнопки "Отмена"
        button_box.rejected.connect(dialog.reject)

        # Отобразить диалоговое окно
        dialog.exec_()

    def add_student_to_db(self, name, file_path, login, password):
        if not name or not file_path:
            return

        # Открыть соединение с базой данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()

        # Прочитать изображение из файла и добавить его в базу данных
        with open(file_path, 'rb') as f:
            image_data = f.read()
            cursor.execute("INSERT INTO compound (name,  image, login, password) VALUES (?,  ?, ?, ?)",
                           (name, image_data, login, password))

        conn.commit()

        self.display_all_student()

    # ФУНКЦИЯ ДЛЯ УДАЛЕНИЯ СТУДЕНТА ИЗ БАЗЫ ДАННЫХ ИЛИ ПРОСМОТР ДОКУМЕНТОВ
    def on_student_clicked(self, item):
        # Получаем данные о выбранном студенте
        student_id = item.data(Qt.UserRole)

        # Отображаем диалоговое окно с кнопками для удаления студента или просмотра фотографии
        dialog = QDialog(self.ALL_RSSM_PAGE)
        dialog.setWindowTitle("Выберите действие")
        dialog.setFixedSize(500, 100)

        # Создаем вертикальный компоновщик для диалогового окна
        vbox = QVBoxLayout(dialog)

        # Добавляем метку с инструкцией
        label = QLabel("Что вы хотите сделать?", dialog)
        label.setAlignment(QtCore.Qt.AlignCenter)
        vbox.addWidget(label)

        # Создаем горизонтальный компоновщик для кнопок
        hbox = QHBoxLayout()

        # Добавляем кнопку для удаления студента
        delete_button = QPushButton("Удалить студента", dialog)
        delete_button.clicked.connect(lambda: self.delete_student(student_id))
        hbox.addWidget(delete_button)

        # Добавляем кнопку для просмотра фотографии
        view_button = QPushButton("Просмотреть фото", dialog)
        view_button.clicked.connect(lambda: self.show_photo(student_id))
        hbox.addWidget(view_button)

        # Добавляем горизонтальный компоновщик в вертикальный компоновщик
        vbox.addLayout(hbox)

        # Отображаем диалоговое окно
        dialog.exec_()

    def delete_student(self, student_id):
        reply = QMessageBox.question(self.ALL_RSSM_PAGE, 'Удаление студента',
                                     'Вы уверены, что хотите удалить этого студента?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            # Удаляем студента из базы данных и из списка

            conn = sqlite3.connect('RSSM.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM compound WHERE id = ?", (student_id,))
            conn.commit()

            cursor.close()
            conn.close()
            self.display_all_student()

    def show_photo(self, student_id):
        # Получаем фото студента из базы данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT image FROM compound WHERE id = ?", (student_id,))
        image_data = cursor.fetchone()[0]
        cursor.close()
        conn.close()

        # Отображаем фото в новом окне
        image = QtGui.QImage.fromData(image_data)
        pixmap = QtGui.QPixmap.fromImage(image)
        dialog = QDialog(self.ALL_RSSM_PAGE)
        dialog.setWindowTitle("Фото студента")
        dialog.setFixedSize(pixmap.width(), pixmap.height())
        label = QLabel(dialog)
        label.setPixmap(pixmap)
        vbox = QVBoxLayout(dialog)
        vbox.addWidget(label)
        dialog.exec_()

        self.stackedWidget.setCurrentIndex(4)

    # ФУНКЦИЯ ДЛЯ ПЕРЕХОДА НА ЛИЧНУЮ СТРАНИЦУ СТУДЕНТА
    def seach_student(self):
        name = self.SEARCH_STUDENT_IN_DATABASE_lineEdit.text()
        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()

        # Подключиться к базе данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()

        # Проверить, существует ли такой студент в таблице
        cursor.execute("SELECT * FROM compound WHERE name=? AND login=? AND password=?", (name, login, password))
        student = cursor.fetchone()

        if student:
            self.stackedWidget.setCurrentIndex(4)
            self.display_person_dock()

        else:
            self.stackedWidget.setCurrentIndex(3)
            self.display_all_student()
        conn.commit()
        cursor.close()
        conn.close()

    # ФУНКЦИЯ ДЛЯ ПОИСКА ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ ЧЕРЕЗ ПОДСВЕТКУ

    def seearch_dock_in_database(self):
        # Получаем значение из SEARCH_DOCK_IN_DATABASE_lineEdit
        search_text = self.SEARCH_DOCK_IN_DATABASE_lineEdit.text()

        # Ищем значение в таблице dock базы данных RSSM.db
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT name_dock FROM dock WHERE name_dock LIKE ?", ('%' + search_text + '%',))
        rows = cursor.fetchall()
        cursor.close()
        conn.close()

        # Очищаем выделение в PERSONAL_DOCK_listWidget
        self.PERSONAL_DOCK_listWidget.clearSelection()

        # Подсвечиваем соответствующие элементы в PERSONAL_DOCK_listWidget
        for row in rows:
            items = self.PERSONAL_DOCK_listWidget.findItems(row[0], QtCore.Qt.MatchExactly)
            for item in items:
                item.setSelected(True)

    # ФУНКЦИЯ ДЛЯ ОТОБРАЖЕНИЯ ДОКУМЕНТОВ ПОЛЬЗОВАТЕЛЯ
    def display_person_dock(self):
        self.PERSONAL_DOCK_listWidget.clear()

        name = self.SEARCH_STUDENT_IN_DATABASE_lineEdit.text()
        con = sqlite3.connect('RSSM.db')
        cur = con.cursor()
        cur.execute(
            "SELECT id, name_dock FROM dock WHERE  person=? ORDER BY name_dock ASC", (name,))
        docks = cur.fetchall()
        for dock in docks:
            dock_id = dock[0]
            name_dock = dock[1]
            item = QtWidgets.QListWidgetItem(name_dock)
            item.setTextAlignment(Qt.AlignCenter)
            item.setData(Qt.UserRole, dock_id)
            self.PERSONAL_DOCK_listWidget.addItem(item)
        cur.close()
        con.close()

    # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ДОКУМЕНТОВ ПОЛЬЗОВАТЕЛЯ ЧЕРЕЗ КНОПКУ
    def add_person_dock(self):
        student_name = self.SEARCH_STUDENT_IN_DATABASE_lineEdit.text()

        dialog = QDialog(self.PERSONAL_PAGE)
        dialog.setWindowTitle("Добавление документа")
        dialog.setFixedSize(500, 150)

        # Create a vertical layout for the dialog
        vbox = QVBoxLayout(dialog)

        # Add a label with the text "Введите название документа и выберите документ" to the vertical layout
        label = QLabel("Введите название документа и выберите документ в формате pdf", dialog)
        label.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        label.setFont(font)
        vbox.addWidget(label)

        # Create a horizontal layout for the name input and buttons
        hbox = QHBoxLayout()

        # Add the name input field to the horizontal layout
        name_input = QLineEdit(dialog)
        name_input.setPlaceholderText("Название")
        name_input.setFixedHeight(30)
        name_input.setFixedWidth(250)
        hbox.addWidget(name_input)

        # Add the buttons to the horizontal layout
        button_box = QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel, dialog)
        button_box.button(QtWidgets.QDialogButtonBox.Ok).setText("Выбрать документ")
        button_box.button(QtWidgets.QDialogButtonBox.Cancel).setText("Закрыть")
        hbox.addWidget(button_box)

        # Add the horizontal layout to the vertical layout
        vbox.addLayout(hbox)

        # Open the file dialog when the "Ok" button is clicked
        file_dialog = QFileDialog(caption="Выберите документ", filter="PDF files (*.pdf)")
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("PDF files (*.pdf)")
        button_box.accepted.connect(file_dialog.exec_)

        # Get the input results when the "Ok" button is clicked in the file dialog
        button_box.accepted.connect(lambda: self.add_person_dock_to_db(name_input.text(),
                                                                       file_dialog.selectedFiles()[
                                                                           0] if file_dialog.result() == QFileDialog.Accepted else None,
                                                                       student_name))

        # Set up the "Cancel" button
        button_box.rejected.connect(dialog.reject)

        # Show the dialog
        dialog.exec_()

    # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ДОКУМЕНТОВ ПОЛЬЗОВАТЕЛЯ В БАЗУ ДАННЫХ
    def add_person_dock_to_db(self, name, file_path, student_name):
        if not name or not file_path:
            return

        # Open a connection to the database
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()

        # Read the PDF file and add it to the database
        with open(file_path, 'rb') as f:
            pdf_data = f.read()
            cursor.execute("INSERT INTO dock (name_dock, person, dock) VALUES (?, ?, ?)",
                           (name, student_name, pdf_data))

        conn.commit()

        self.display_person_dock()

    # ФУНКЦИЯ ОБРАБОТКИ НАЖАТИЯ НА ДОКУМЕНТ ПОЛЬЗОВАТЕЛЯ
    def on_person_dock_clicked(self, item):
        # Получаем данные о выбранном студенте
        docki_id = item.data(Qt.UserRole)

        # Отображаем диалоговое окно с кнопками для удаления документа, просмотра документа или его скачивания
        dialog = QDialog(self.PERSONAL_PAGE)
        dialog.setWindowTitle("Выберите действие")
        dialog.setFixedSize(500, 100)

        # Создаем вертикальный компоновщик для диалогового окна
        vbox = QVBoxLayout(dialog)

        # Добавляем метку с инструкцией
        label = QLabel("Что вы хотите сделать?", dialog)
        label.setAlignment(QtCore.Qt.AlignCenter)
        vbox.addWidget(label)

        # Создаем горизонтальный компоновщик для кнопок
        hbox = QHBoxLayout()

        # Добавляем кнопку для просмотра документа
        view_button = QPushButton("Просмотреть документ", dialog)
        view_button.clicked.connect(lambda: self.show_dock(docki_id))
        hbox.addWidget(view_button)

        # Добавляем кнопку для скачивания документа
        download_button = QPushButton("Скачать документ", dialog)
        download_button.clicked.connect(lambda: self.download_dock(docki_id))
        hbox.addWidget(download_button)

        # Добавляем кнопку для удаления документа
        delete_button = QPushButton("Удалить документ", dialog)
        delete_button.clicked.connect(lambda: self.delete_dock(docki_id))
        hbox.addWidget(delete_button)

        # Добавляем горизонтальный компоновщик в вертикальный компоновщик
        vbox.addLayout(hbox)

        # Отображаем диалоговое окно
        dialog.exec_()

    # ФУНКЦИЯ ДЛЯ ПРОСМОТРА ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ
    def show_dock(self, docki_id):
        # Получаем документ студента из базы данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT dock FROM dock WHERE id = ?", (docki_id,))
        dock_data = cursor.fetchone()[0]
        cursor.close()
        conn.close()

        # Отображаем документ в новом окне
        file_path = os.path.join(tempfile.gettempdir(), 'dock.pdf')
        with open(file_path, 'wb') as f:
            f.write(dock_data)
        if sys.platform == 'darwin':
            subprocess.call(('open', file_path))
        elif sys.platform == 'win32':
            os.startfile(file_path)
        else:
            subprocess.call(('xdg-open', file_path))

    # ФУНКЦИЯ ДЛЯ СКАЧИВАНИЯ ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ
    def download_dock(self, docki_id):
        # Получаем документ студента из базы данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT name_dock, dock FROM dock WHERE id = ?", (docki_id,))
        dock_data = cursor.fetchone()
        cursor.close()
        conn.close()

        # Сохраняем документ в файл
        file_path, _ = QFileDialog.getSaveFileName(self.PERSONAL_PAGE, "Сохранить документ", dock_data[0],
                                                   "PDF files (*.pdf)")
        if file_path:
            with open(file_path, 'wb') as f:
                f.write(dock_data[1])

    # ФУНКЦИЯ ДЛЯ УДАЛЕНИЯ ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ
    def delete_dock(self, docki_id):
        reply = QMessageBox.question(self.PERSONAL_PAGE, 'Удаление документа',
                                     'Вы уверены, что хотите удалить этот документ?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            # Удаляем документ из базы данных и из списка
            conn = sqlite3.connect('RSSM.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM dock WHERE id = ?", (docki_id,))
            conn.commit()
            cursor.close()
            conn.close()
            self.display_person_dock()

    # ФУНКЦИЯ ДЛЯ ПОДСВЕТКИ ДОКУМЕНТА
    def seearch_dock_in_databasee(self):

        search_text = self.SEARCH_DOCK_ALL_IN_DATABASE_lineEdit.text()

        # Ищем значение в таблице dock базы данных RSSM.db
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT names_dock FROM dock_users WHERE names_dock LIKE ?", ('%' + search_text + '%',))
        rows = cursor.fetchall()
        cursor.close()
        conn.close()

        # Очищаем выделение
        self.ALL_DOCK_listWidget.clearSelection()

        # Подсвечиваем соответствующие элементы
        for row in rows:
            items = self.ALL_DOCK_listWidget.findItems(row[0], QtCore.Qt.MatchExactly)
            for item in items:
                item.setSelected(True)

        # ФУНКЦИЯ ДЛЯ ОТОБРАЖЕНИЯ ДОКУМЕНТОВ

    def display_user_dock(self):
        self.ALL_DOCK_listWidget.clear()
        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()
        con = sqlite3.connect('RSSM.db')
        cur = con.cursor()
        cur.execute(
            "SELECT id, names_dock FROM dock_users WHERE login=? AND password=? ORDER BY names_dock ASC",
            (login, password))
        docums = cur.fetchall()
        for docum in docums:
            docum_id = docum[0]
            dock_name = docum[1]
            item = QtWidgets.QListWidgetItem(dock_name)
            item.setTextAlignment(Qt.AlignCenter)
            item.setData(Qt.UserRole, docum_id)

            self.ALL_DOCK_listWidget.addItem(item)
        cur.close()
        con.close()

        # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ДОКУМЕНТОВ ПОЛЬЗОВАТЕЛЯ ЧЕРЕЗ КНОПКУ

    def add_user_dock(self):
        login = self.SIGN_IN_LOGIN_lineEdit.text() or self.SIGN_UP_LOGIN_lineEdit.text()
        password = self.SIGN_IN_PASSWORD_lineEdit.text() or self.SIGN_UP_PASSWORD_lineEdit.text()

        dialog = QDialog(self.MORE_DOCK_PAGE)
        dialog.setWindowTitle("Добавление документа")
        dialog.setFixedSize(500, 150)

        # Create a vertical layout for the dialog
        vbox = QVBoxLayout(dialog)

        # Add a label with the text "Введите название документа и выберите документ" to the vertical layout
        label = QLabel("Введите название документа и выберите документ в формате pdf", dialog)
        label.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        label.setFont(font)
        vbox.addWidget(label)

        # Create a horizontal layout for the name input and buttons
        hbox = QHBoxLayout()

        # Add the name input field to the horizontal layout
        name_input = QLineEdit(dialog)
        name_input.setPlaceholderText("Название")
        name_input.setFixedHeight(30)
        name_input.setFixedWidth(250)
        hbox.addWidget(name_input)

        # Add the buttons to the horizontal layout
        button_box = QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel, dialog)
        button_box.button(QtWidgets.QDialogButtonBox.Ok).setText("Выбрать документ")
        button_box.button(QtWidgets.QDialogButtonBox.Cancel).setText("Закрыть")
        hbox.addWidget(button_box)

        # Add the horizontal layout to the vertical layout
        vbox.addLayout(hbox)

        # Open the file dialog when the "Ok" button is clicked
        file_dialog = QFileDialog(caption="Выберите документ", filter="PDF files (*.pdf)")
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("PDF files (*.pdf)")
        button_box.accepted.connect(file_dialog.exec_)

        # Get the input results when the "Ok" button is clicked in the file dialog
        button_box.accepted.connect(lambda: self.add_user_dock_to_db(name_input.text(),
                                                                     file_dialog.selectedFiles()[
                                                                         0] if file_dialog.result() == QFileDialog.Accepted else None,
                                                                     login, password))

        # Set up the "Cancel" button
        button_box.rejected.connect(dialog.reject)

        # Show the dialog
        dialog.exec_()

        # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ДОКУМЕНТОВ ПОЛЬЗОВАТЕЛЯ В БАЗУ ДАННЫХ

    def add_user_dock_to_db(self, name, file_path, login, password):
        if not name or not file_path:
            return

        # Open a connection to the database
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()

        # Read the PDF file and add it to the database
        with open(file_path, 'rb') as f:
            pdf_data = f.read()
            cursor.execute("INSERT INTO dock_users (names_dock, login, password, dock) VALUES (?, ?, ?,?)",
                           (name, login, password, pdf_data))

        conn.commit()

        self.display_user_dock()

        # ФУНКЦИЯ ОБРАБОТКИ НАЖАТИЯ НА ДОКУМЕНТ ПОЛЬЗОВАТЕЛЯ

    def on_user_dock_clicked(self, item):
        # Получаем данные о выбранном студенте
        docim_id = item.data(Qt.UserRole)

        # Отображаем диалоговое окно с кнопками для удаления документа, просмотра документа или его скачивания
        dialog = QDialog(self.MORE_DOCK_PAGE)
        dialog.setWindowTitle("Выберите действие")
        dialog.setFixedSize(500, 100)

        # Создаем вертикальный компоновщик для диалогового окна
        vbox = QVBoxLayout(dialog)

        # Добавляем метку с инструкцией
        label = QLabel("Что вы хотите сделать?", dialog)
        label.setAlignment(QtCore.Qt.AlignCenter)
        vbox.addWidget(label)

        # Создаем горизонтальный компоновщик для кнопок
        hbox = QHBoxLayout()

        # Добавляем кнопку для просмотра документа
        view_button = QPushButton("Просмотреть документ", dialog)
        view_button.clicked.connect(lambda: self.show_user_dock(docim_id))
        hbox.addWidget(view_button)

        # Добавляем кнопку для скачивания документа
        download_button = QPushButton("Скачать документ", dialog)
        download_button.clicked.connect(lambda: self.download_user_dock(docim_id))
        hbox.addWidget(download_button)

        # Добавляем кнопку для удаления документа
        delete_button = QPushButton("Удалить документ", dialog)
        delete_button.clicked.connect(lambda: self.delete_user_dock(docim_id))
        hbox.addWidget(delete_button)

        # Добавляем горизонтальный компоновщик в вертикальный компоновщик
        vbox.addLayout(hbox)

        # Отображаем диалоговое окно
        dialog.exec_()

        # ФУНКЦИЯ ДЛЯ ПРОСМОТРА ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ

    def show_user_dock(self, docim_id):
        # Получаем документ студента из базы данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT dock FROM dock_users WHERE id = ?", (docim_id,))
        dock_data = cursor.fetchone()[0]
        cursor.close()
        conn.close()

        # Отображаем документ в новом окне
        file_path = os.path.join(tempfile.gettempdir(), 'dock.pdf')
        with open(file_path, 'wb') as f:
            f.write(dock_data)
        if sys.platform == 'darwin':
            subprocess.call(('open', file_path))
        elif sys.platform == 'win32':
            os.startfile(file_path)
        else:
            subprocess.call(('xdg-open', file_path))

        # ФУНКЦИЯ ДЛЯ СКАЧИВАНИЯ ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ

    def download_user_dock(self, docim_id):
        # Получаем документ студента из базы данных
        conn = sqlite3.connect('RSSM.db')
        cursor = conn.cursor()
        cursor.execute("SELECT names_dock, dock FROM dock_users WHERE id = ?", (docim_id,))
        dock_data = cursor.fetchone()
        cursor.close()
        conn.close()

        # Сохраняем документ в файл
        file_path, _ = QFileDialog.getSaveFileName(self.MORE_DOCK_PAGE, "Сохранить документ", dock_data[0],
                                                   "PDF files (*.pdf)")
        if file_path:
            with open(file_path, 'wb') as f:
                f.write(dock_data[1])

        # ФУНКЦИЯ ДЛЯ УДАЛЕНИЯ ДОКУМЕНТА ПОЛЬЗОВАТЕЛЯ

    def delete_user_dock(self, docim_id):
        reply = QMessageBox.question(self.MORE_DOCK_PAGE, 'Удаление документа',
                                     'Вы уверены, что хотите удалить этот документ?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            # Удаляем документ из базы данных и из списка
            conn = sqlite3.connect('RSSM.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM dock_users WHERE id = ?", (docim_id,))
            conn.commit()
            cursor.close()
            conn.close()
            self.display_user_dock()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
