# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyTaskList.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import *
from PyQt5.QtSql import *
from PyQt5.QtCore import Qt, QDate
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtSql import *
from PyQt5.QtWidgets import QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(755, 863)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 755, 863))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(0, 0, 755, 863))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("1_2.png"))
        self.label.setObjectName("label")
        self.Home__Registration_pushButton = QtWidgets.QPushButton(self.page)
        self.Home__Registration_pushButton.setGeometry(QtCore.QRect(170, 680, 421, 61))
        self.Home__Registration_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Home__Registration_pushButton.setText("")
        self.Home__Registration_pushButton.setObjectName("Home__Registration_pushButton")
        self.Home__Registration_pushButton.clicked.connect(self.switch_0_1)
        self.Home__Entrance_pushButton = QtWidgets.QPushButton(self.page)
        self.Home__Entrance_pushButton.setGeometry(QtCore.QRect(290, 770, 181, 61))
        self.Home__Entrance_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Home__Entrance_pushButton.setText("")
        self.Home__Entrance_pushButton.setObjectName("Home__Entrance_pushButton")
        self.Home__Entrance_pushButton.clicked.connect(self.switch_0_2)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 755, 863))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("2_2.png"))
        self.label_2.setObjectName("label_2")
        self.Registration_Login_lineEdit = QtWidgets.QLineEdit(self.page_2)
        self.Registration_Login_lineEdit.setGeometry(QtCore.QRect(330, 410, 331, 41))
        self.Registration_Login_lineEdit.setObjectName("Registration_Login_lineEdit")
        self.Registration_Password_lineEdit = QtWidgets.QLineEdit(self.page_2)
        self.Registration_Password_lineEdit.setGeometry(QtCore.QRect(330, 560, 331, 41))
        self.Registration_Password_lineEdit.setObjectName("Registration_Password_lineEdit")
        self.Registration__TaskList_pushButton = QtWidgets.QPushButton(self.page_2)
        self.Registration__TaskList_pushButton.setGeometry(QtCore.QRect(40, 730, 681, 81))
        self.Registration__TaskList_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Registration__TaskList_pushButton.setText("")
        self.Registration__TaskList_pushButton.setObjectName("Registration__TaskList_pushButton")
        self.Registration__TaskList_pushButton.clicked.connect(self.registration)
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.label_3 = QtWidgets.QLabel(self.page_3)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 755, 863))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("3_2.png"))
        self.label_3.setObjectName("label_3")
        self.Entranse_Login_lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.Entranse_Login_lineEdit.setGeometry(QtCore.QRect(330, 440, 331, 41))
        self.Entranse_Login_lineEdit.setObjectName("Entranse_Login_lineEdit")
        self.Entranse__TaskList_pushButton = QtWidgets.QPushButton(self.page_3)
        self.Entranse__TaskList_pushButton.setGeometry(QtCore.QRect(270, 770, 221, 71))
        self.Entranse__TaskList_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Entranse__TaskList_pushButton.setText("")
        self.Entranse__TaskList_pushButton.setObjectName("Entranse__TaskList_pushButton")
        self.Entranse__TaskList_pushButton.clicked.connect(self.entrance)
        self.Entranse_Password_lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.Entranse_Password_lineEdit.setGeometry(QtCore.QRect(330, 600, 331, 41))
        self.Entranse_Password_lineEdit.setObjectName("Entranse_Password_lineEdit")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.label_4 = QtWidgets.QLabel(self.page_4)
        self.label_4.setGeometry(QtCore.QRect(0, 0, 755, 863))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("4_2.png"))
        self.label_4.setObjectName("label_4")
        self.Name_Task_lineEdit = QtWidgets.QLineEdit(self.page_4)
        self.Name_Task_lineEdit.setGeometry(QtCore.QRect(440, 253, 271, 31))
        self.Name_Task_lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.Name_Task_lineEdit.setObjectName("Name_Task_lineEdit")
        self.Dead_Line_dateEdit = QtWidgets.QDateEdit(self.page_4)
        self.Dead_Line_dateEdit.setGeometry(QtCore.QRect(310, 363, 271, 31))
        self.Dead_Line_dateEdit.setObjectName("Dead_Line_dateEdit")
        self.Add_Task_pushButton = QtWidgets.QPushButton(self.page_4)
        self.Add_Task_pushButton.setGeometry(QtCore.QRect(150, 460, 381, 51))
        self.Add_Task_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Add_Task_pushButton.setText("")
        self.Add_Task_pushButton.setObjectName("Add_Task_pushButton")
        self.Add_Task_pushButton.clicked.connect(self.add_task)
        self.Task_List_listWidget = QtWidgets.QListWidget(self.page_4)
        self.Task_List_listWidget.setGeometry(QtCore.QRect(60, 590, 641, 241))
        self.Task_List_listWidget.setObjectName("Task_List_listWidget")
        self.Task_List_listWidget.setStyleSheet("font-size: 14pt; text-align: center;")
        self.Task_List_listWidget.itemClicked.connect(self.on_task_clicked)

        self.stackedWidget.addWidget(self.page_4)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "My_Task_List"))

    #ФУНЦИИ ПЕРЕКЛЮЧЕНИЯ МЕЖДУ СТРАНИЦАМИ
    def switch_0_1(self, index):
            self.stackedWidget.setCurrentIndex(1)

    def switch_0_2(self, index):
            self.stackedWidget.setCurrentIndex(2)


    # ФУНКЦИЯ ДЛЯ РЕГИСТРАЦИИ АККАУНТА
    def registration(self):
        con = sqlite3.connect('tasks.db')
        cur = con.cursor()
        a = self.Registration_Login_lineEdit.text()
        b = self.Registration_Password_lineEdit.text()
        query1 = f" INSERT INTO users (login,password) VALUES('{a}','{b}')"
        cur.execute(query1)
        con.commit()
        cur.close()
        con.close()
        # переходим на страницу заметок
        self.stackedWidget.setCurrentIndex(3)  # регистрация пользователя
        self.display_tasks()


    #ФУНКЦИЯ ДЛЯ ВХОДА В АККАУНТ
    def entrance(self):
        login = self.Entranse_Login_lineEdit.text()
        password = self.Entranse_Password_lineEdit.text()

        # Подключиться к базе данных
        conn = sqlite3.connect('tasks.db')
        cursor = conn.cursor()

        # Проверить, существует ли пользователь с таким логином и паролем в таблице users
        cursor.execute("SELECT * FROM users WHERE login=? AND password=?", (login, password))
        user = cursor.fetchone()

        if user:
            self.stackedWidget.setCurrentIndex(3)
            self.display_tasks()

        else:
            self.stackedWidget.setCurrentIndex(0)


    # ФУНКЦИЯ ДЛЯ ОТОБРАЖЕНИЯ ЗАДАЧИ В БД
    def display_tasks(self):
        self.Task_List_listWidget.clear()
        login = self.Registration_Login_lineEdit.text() or self.Entranse_Login_lineEdit.text()
        password = self.Registration_Password_lineEdit.text() or self.Entranse_Password_lineEdit.text()
        con = sqlite3.connect('tasks.db')
        cur = con.cursor()
        cur.execute("SELECT id, name, deadline FROM tasks WHERE login=? AND password=? ORDER BY deadline ASC",
                    (login, password))
        tasks = cur.fetchall()
        for task in tasks:
            task_id = task[0]
            task_name = task[1]
            deadline = task[2]
            item = QtWidgets.QListWidgetItem(f"{task_name} - {deadline}")
            item.setData(Qt.UserRole, task_id)
            item.setTextAlignment(Qt.AlignCenter)
            self.Task_List_listWidget.addItem(item)
        cur.close()
        con.close()


    #ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ЗАДАЧИ В БД
    def add_task(self):
        name=self.Name_Task_lineEdit.text()
        deadline=self.Dead_Line_dateEdit.date().toString("yyyy-MM-dd")
        urgent = 1 if self.Task_List_listWidget.count() < 5 else 0
        login=self.Registration_Login_lineEdit.text() or self.Entranse_Login_lineEdit.text()
        password=self.Registration_Password_lineEdit.text() or self.Entranse_Password_lineEdit.text()

        con = sqlite3.connect('tasks.db')
        cur = con.cursor()
        cur.execute("INSERT INTO tasks ( name, deadline, urgent, login, password) VALUES (?, ?, ?, ?, ?)",
                    ( name, deadline, urgent, login, password))

        con.commit()

        self.display_tasks()


    #ФУНКЦИЯ ДЛЯ УДАЛЕНИЯ ЗАДАЧИ ИЗ БАЗЫ ДАННЫХ
    def on_task_clicked(self, item):
        # получаем данные о выбранной задаче
        task_id = item.data(Qt.UserRole)


        # отображаем диалоговое окно подтверждения удаления
        reply = QMessageBox.question(self.page_4, 'Удаление задач', 'Вы уверены, что хотите удалить эту задачу?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            # удаляем задачу из базы данных и из списка

            conn = sqlite3.connect('tasks.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            conn.commit()

            cursor.close()
            conn.close()
            self.display_tasks()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
